---
import { cn } from '@/lib/utils'
import type { SVGProps } from 'react'

interface BtnProps {
	class?: string
	buttonIcon?: string
	text: string
	primary?: boolean
	rippleEffect?: boolean
	target?: string
	href?: string
	key: string
}
const {
	key,
	class: className,
	buttonIcon,
	text,
	rippleEffect,
	primary,
	href,
	target = '_blank',
	...props
} = Astro.props as BtnProps
---

{
	href ? (
		<a
			href={href}
			target={target}
			class={cn(
				rippleEffect && 'ripple',
				primary ? 'btn_gradient text-white' : 'text-white dark:text-black',
				'group relative inline-flex h-12 items-center gap-x-2 overflow-hidden rounded-full bg-black px-6 text-white transition dark:bg-white',
				className
			)}
		>
			{buttonIcon && <span set:html={buttonIcon} class="flex" />}
			<span class="relative">{text}</span>
			{primary && (
				<div class="animate-shine-infinite absolute inset-0 -top-[20px] flex h-[calc(100%+40px)] w-full justify-center blur-[12px]">
					<div class="relative h-full w-8 bg-white/30" />
				</div>
			)}
		</a>
	) : (
		<button
			class={cn(
				rippleEffect && 'ripple',
				primary ? 'btn_gradient text-white' : 'text-white dark:text-black',
				'group relative inline-flex h-12 items-center gap-x-2 overflow-hidden rounded-full bg-black px-6 text-white transition dark:bg-white',
				className
			)}
		>
			{buttonIcon && <span set:html={buttonIcon} class="flex" />}
			<span class="relative">{text}</span>
			{primary && (
				<div class="animate-shine-infinite absolute inset-0 -top-[20px] flex h-[calc(100%+40px)] w-full justify-center blur-[12px]">
					<div class="relative h-full w-8 bg-white/30" />
				</div>
			)}
		</button>
	)
}

<!-- <button
	class={cn(
		rippleEffect && 'ripple',
		primary ? 'btn_gradient text-white' : 'text-white dark:text-black',
		'inline-flex items-center gap-x-2 dark:bg-white  group relative h-12 overflow-hidden rounded-full bg-black px-6 text-white transition',
		className
	)}
>
	{buttonIcon && <span set:html={buttonIcon} class="flex" />}
	<span class="relative">{text}</span>
	{
		primary && (
			<div class="animate-shine-infinite absolute inset-0 -top-[20px] flex h-[calc(100%+40px)] w-full justify-center blur-[12px]">
				<div class="relative h-full w-8 bg-white/30" />
			</div>
		)
	}
</button> -->

<script>
	document.addEventListener('DOMContentLoaded', () => {
		const ripplebutton = document.querySelectorAll('.ripple')
		if (ripplebutton.length > 0) {
			ripplebutton.forEach((ele) => {
				ele.addEventListener('click', function (e: MouseEvent): void {
					// Make sure e.target is an element
					const target = e.target as HTMLElement
					if (!target) return // If target is null or undefined, exit early

					// Check if this gets logged
					const x = e.clientX
					const y = e.clientY

					const rect = target.getBoundingClientRect()
					const xInside = x - rect.left
					const yInside = y - rect.top

					const circle = document.createElement('span')
					circle.classList.add('rippleCircle')
					circle.style.top = yInside + 'px'
					circle.style.left = xInside + 'px'

					// Ensure 'this' is correctly typed
					const button = this as HTMLElement
					button.appendChild(circle)

					setTimeout(() => circle.remove(), 500)
				})
			})
		}
	})
</script>
